---
title: Backing Up MySQL for Pivotal Cloud Foundry
owner: MySQL
---

This topic describes how to enable, configure, and use backups in MySQL for Pivotal Cloud Foundry (PCF).

## <a id="overview"></a>Overview

Automated backups have the following features:

- Periodically create and upload backup artifacts suitable for restoring the complete set of database instances allocated in the service
- No locks, no downtime
- The only effect on the serving systems is the amount of I/O required to copy the database and log files off of the VM
- Includes a metadata file that contains the critical details of the backup artifact, including the effective calendar time of the backup
- Backup artifacts are encrypted within the MySQL for PCF cluster of VMs; unencrypted data is never transported outside of the MySQL for PCF deployment

## <a id="enable-backups"></a>Enable Automated Backups

You can configure MySQL for PCF to automatically back up its databases to external storage.

* **How and Where**: There are four options for how automated backups transfer backup data and where the data saves out to:
  - MySQL for PCF runs an `scp` command that secure-copies backup files to a VM or physical machine operating outside of PCF. The operator provisions the backup machine separately from their PCF installation. This is the most efficient option.
  - MySQL for PCF runs an [S3](https://aws.amazon.com/documentation/s3/) client that saves backups to an Amazon S3 bucket, [Ceph](http://docs.ceph.com/docs/master/) storage cluster, or other S3-compatible endpoint certified by Pivotal.
  - MySQL for PCF runs an [Azure](https://docs.microsoft.com/en-us/azure/storage/) client that saves backups to a Azure blob store container.
  - MySQL for PCF runs a [GCS](https://cloud.google.com/storage/docs/) client that saves backups to a Google Cloud Storage bucket.

* **When**: Backups follow a schedule that you specify with a [cron](http://godoc.org/github.com/robfig/cron) expression.

* **What**: You can back up just the primary node, or all nodes in the cluster.

To enable automated backups and configure them for options above, perform the following steps:

1. Navigate to the **MySQL for Pivotal Cloud Foundry** tile on the Ops Manager Installation Dashboard.
1. Click the tile to open the configuration settings.
1. Under the **Settings** tab, click **Backups**. The **Automated Database Backups** pane opens.
1. Under **Backups**, click **Enable Backups**.
  <%= image_tag('enable-backups.png') %>
1. For **Cron Schedule**, enter a cron schedule for the backups. The syntax is similar to traditional cron, with additional features such as `@every 1d`, which specifies daily backups. See the cron Go library [documentation](https://godoc.org/github.com/robfig/cron) for more information.
1. If you want to back up all nodes, select the **Back up all nodes** checkbox.
1. Configure a destination where backup artifacts will be delivered. Skip to the appropriate section below:
  - [Ceph or AWS](#ceph-aws)
  - [Azure](#azure)
  - [Google Cloud Storage](#gcs)
  - [SCP](#scp)
1. Under the **Settings** tab, click **Resource Config**.
1. Set the number of instances for **Backup Prepare Node** to `1`.
1. Click **Save**.

### <a id='ceph-aws'></a>Ceph or AWS

To back up your database on Ceph or Amazon Web Services (AWS) S3, perform the following steps:

1. Select **Ceph or Amazon S3**.
  <br><%= image_tag('configure-backups-s3.png') %>
1. Enter your **S3 Endpoint URL**, for example, `https://s3.amazonaws.com`.
1. Enter your **S3 Bucket Name**. Do not include an `s3:// prefix`, a trailing `/`, or underscores. If the bucket does not already exist, it will be created automatically.
1. For **Bucket Path**, specify a folder within the bucket to hold your MySQL backups. Do not include a trailing `/`. If the folder does not already exist, it will be created automatically.
  <p class="note"><strong>Note</strong>: You must use this folder exclusively for this cluster's backup artifacts. Mixing the backup artifacts from different clusters within a single folder can cause confusion and possible inadvertent loss of backup artifacts.</p>
1. For **AWS Access Key ID** and **AWS Secret Access Key**, enter your Ceph or AWS credentials. For AWS, Pivotal recommends creating an [IAM](https://aws.amazon.com/iam/) credential that only has access to this bucket.
1. Click **Save**.

### <a id='azure'></a>Azure

To back up your database on Azure, do the following:

1. Select **Azure Blob Storage**.
  <br><%= image_tag('configure-backups-azure.png') %>
1. Enter your **Azure Storage Account**, for example, `mystorageaccount`.
1. Enter your **Azure Storage Access Key**.
1. Enter your **Container** name, for example, `mycontainer`.
1. For **Container Path**, specify a folder within the container to hold your MySQL backups. Do not include a trailing `/`. If the folder does not already exist, it will be created automatically.
   <p class="note"><strong>Note</strong>: You must use this folder exclusively for this cluster's backup artifacts. Mixing the backup artifacts from different clusters within a single folder can cause confusion and possible inadvertent loss of backup artifacts.</p>
1. (Optional) Configure **Base URL** to specify the base URL for your on-premise blobstore. </br></br>
    If you don't specify a URL here, by default, backups are sent to the public Azure blobstore.
1. Click **Save**.

### <a id='gcs'></a>Google Cloud Storage

To back up your database on Google Cloud Storage (GCS), perform the following steps:

1. Select **Google Cloud Storage**.
  <br><%= image_tag('configure-backups-gcs.png') %>
1. Enter your **Google Cloud Storage Account**, for example, `mystorageaccount@google.com`.
   <p class="note"><strong>Note</strong>: Service accounts must have Storage Admin IAM permissions. See documentation for how to generate the JSON key.
1. Enter your **Google Cloud Storage Bucket Name**, for example, `mybucket`.
1. Enter your **Google Cloud Storage Project ID**, for example, `my-project-id`.
1. Click **Save**.

### <a id='scp'></a>SCP

To back up your database using SCP, perform the following steps:

1. Select **SCP to a Remote Host**.
<%= image_tag('configure-backups-scp.png') %>
1. Enter the **Username**, **Hostname**, and **Destination Directory** for the backups.
  <p class="note"><strong>Note</strong>: Pivotal recommends using a VM not within the PCF deployment for the destination of SCP backups. SCP enables the operator to use any desired storage solution on the destination VM.</p>
1. For **Private Key**, paste in the private key that will be used to encrypt the SCP transfer.
1. Enter the **SCP Port**. SCP runs on port 22 by default.
1. Click **Save**.

## <a id="disable-backups"></a>Disable Automated Backups

To disable automated backups, perform the following steps:

1. Navigate to the MySQL for Pivotal Cloud Foundry tile on the Ops Manager Installation Dashboard.
1. Click **Backups**.
  <%= image_tag('disable-backups.png') %>
1. Under **Backups**, click **Disable Backups**.
1. Under **Backup Destination**, click **No Backups**.
1. Click **Save**.
1. In the left navigation, click **Resource Config**.
1. Change the number of instances for **Backup Prepare Node** from `1` to `0`.
1. Click **Save**.
1. Return to the Ops Manager Installation Dashboard and click **Apply Changes**.

To configure automated backups for MySQL for PCF, perform the following steps:

1. Navigate to the MySQL for Pivotal Cloud Foundry tile on the Ops Manager Installation Dashboard.
1. Click **Backups**.

## <a id="understand"></a>Understand Backups

The sections below describe the [process](#process) that MySQL for PCF component jobs follow when performing automated backups, and the format for the [metadata file](#metadata) that records information about each backup.

### <a id="process"></a>Backup Process

Operators use Ops Manager to [configure](./configuring.html#backups) the schedule for automated backups and the location and credentials needed to store backup artifacts.

The diagram below shows the process through which MySQL for PCF jobs initiate and run automated backups.

<div class="mermaid">
sequenceDiagram
  participant Blob store
  participant Service Backup job
  Note over Service Backup job: Triggered by timer, following schedule configured in Ops Manager
  Service Backup job->>Streaming Backup client:Request backup
  Streaming Backup client->>Streaming Backup tool:Request backup
  Streaming Backup tool->>MySQL server:Request backup
  Note over MySQL server: Flush tables with read lock
  MySQL server->>Streaming Backup tool:Data
  Streaming Backup tool->>Streaming Backup client:Data
  Streaming Backup client->>Service Backup job:Data
  Note over Service Backup job:Compress and encrypt
  Service Backup job->>Blob store:Backup artifact
  Note over Blob store:Store backup artifact, using creds configured in Ops Manager
  Blob store-\->>Service Backup job:Confirm artifact stored
  Note over Service Backup job:Clean up local storage
</div>

Two MySQL for PCF component VMs host the jobs listed above as follows:

<table id='job-vms' border="1" class="nice" >
  <tr>
    <th>Job</th>
    <th>Job name in the<code>code</code></th>
    <th>Host VM</th>
  </tr><tr>
    <td>Service Backup</td>
    <td><code>service-backup</code></td>
    <td rowspan=2>Backup Prepare VM</td>
  </tr><tr>
    <td>Streaming Backup client</td>
    <td><code>streaming-backup-client</code></td>
  </tr><tr>
    <td>Streaming Backup tool</td>
    <td><code>streaming-backup-tool</code></td>
    <td rowspan=2>MySQL VM</td>
  </tr><tr>
    <td>MySQL server</td>
    <td><code>mysql</code></td>
  </tr>
</table>

### <a id="metadata"></a>Backup Metadata

Along with each backup artifact, MySQL for PCF uploads a `mysql-backup-XXXXXXXXXX.txt` metadata file.

The contents of the metadata file resemble the following:

```
compact = N
encrypted = N
tool_version = 2.4.5
server_version = 10.1.20-MariaDB
end_time = 2017-05-05 23:26:19
binlog_pos = filename 'mysql-bin.000016', position '7000000', GTID of the last change '0-1-30000'
incremental = N
format = tar
compressed = N
uuid = 30000000-3000-1000-9000-40000000000f
name =
lock_time = 0
innodb_from_lsn = 0
innodb_to_lsn = 6286393
partial = N
tool_command = --user=admin --password=... --stream=tar tmp/
ibbackup_version = 2.4.5
tool_name = innobackupex
start_time = 2017-05-05 23:26:17
```

Within this file, the most important items are the `start_time` and the `server_version` entries. Transactions that have not been completed at the start of the backup effort are not present in the restored artifact.

<p class="note"><strong>Note</strong>: Both <code>compressed</code> and <code>encrypted</code> show as <code>N</code> in this file, yet the artifact uploaded by MySQL for PCF is both compressed and encrypted. This is a known bug.</p>

## <a id="restoring"></a>Restore a Backup Artifact

MySQL for PCF keeps at least two complete copies of the data. In most cases, if a cluster is still able to connect to persistent storage, you can restore a cluster to health using the [bootstrap process](bootstrapping.html). Before resorting to a database restore, contact [Pivotal Support](https://support.pivotal.io) to ensure your existing cluster is beyond help.

The disaster recovery backups feature of MySQL for PCF is primarily intended as a way to recover data to the same PCF deployment from which the data was backed up. This process replaces 100% of the data and state of a running MySQL for PCF cluster. This is especially relevant with regard to service instances and bindings.

<p class="note"><strong>Note</strong>: Because of how services instances are defined, you cannot restore a MySQL for PCF database to a different PCF deployment.</p>

<p class="note"><strong>Note</strong>: To restore a single service instance, see the <a href="restoring-single-instance.html">Restoring a Single Service Instance</a> topic.</p>

In the event of a total cluster loss, the process to restore a backup artifact to a MySQL for PCF cluster is entirely manual. Perform the following steps to use the offsite backups to restore your cluster to its previous state:

1. Discover the encryption keys in the **Credentials** tab of the MySQL for PCF tile.
1. If necessary, install the same version of the **MySQL for PCF** product in the Ops Manager Installation Dashboard.
1. Perform the following steps to reduce the size of the MySQL for PCF cluster to a single node:
    1. From the Ops Manager Installation Dashboard, click the **MySQL for PCF** tile.
    1. Click **Resource Config**.
    1. Set the number of instances for **MySQL Server** to 1.
    1. Click **Save**.
    1. Return to the Ops Manager Installation Dashboard and click **Apply Changes**.
1. After the deployment finishes, perform the following steps to prepare the first node for restoration:
    1. SSH into the Ops Manager Director. For more information, see the [SSH into Ops Manager](http://docs.pivotal.io/pivotalcf/1-11/customizing/trouble-advanced.html#ssh) section in <em>Advanced Troubleshooting with the BOSH CLI</em>.
    1. Retrieve the IP address for the MySQL server by navigating to the **MySQL for PCF** tile and clicking the **Status** tab.
    1. Retrieve the VM credentials for the MySQL server by navigating to the **MySQL for PCF** tile and clicking the **Credentials** tab.
    1. From the Ops Manager Director VM, use the BOSH CLI to log in to the BOSH Director:
      1. If you are using PCF v1.10, follow the BOSH CLI v1 procedure in <a href="http://docs.pivotal.io/pivotalcf/1-11/customizing/trouble-advanced.html#bosh1-access">Log in to the BOSH Director</a>.
      1. If you are using PCF v1.11 or later, follow the BOSH CLI v2 procedure in <a href="http://docs.pivotal.io/pivotalcf/1-11/customizing/trouble-advanced.html#bosh2-access">Log in to the BOSH Director</a>.
    1. From the Ops Manager Director VM, use the BOSH CLI to SSH into the first MySQL job:
      1. If you are using PCF v1.10, follow the BOSH CLI v1 procedure in <a href="http://docs.pivotal.io/pivotalcf/1-11/customizing/trouble-advanced.html#ssh-v1">BOSH SSH</a>.
      1. If you are using PCF v1.11 or later, follow the BOSH CLI v2 procedure in <a href="http://docs.pivotal.io/pivotalcf/1-11/customizing/trouble-advanced.html#ssh-v2">BOSH SSH</a>.
    1. On the MySQL server VM, become super user:
      <pre class="terminal">$ sudo su</pre>
    1. Pause the local database server:
      <pre class="terminal">$ monit stop all</pre>
    1. Confirm that all jobs are listed as `not monitored`:
      <pre class="terminal">$ watch monit summary</pre>
    1. Delete the existing MySQL data that is stored on disk:
      <pre class="terminal">$ rm -rf /var/vcap/store/mysql/*</pre>
1. Perform the following steps to restore the backup:
    1. Move the compressed backup file to the node using `scp`.
    1. Decrypt and expand the file using `gpg`, sending the output to tar:
      <pre class="terminal">$ gpg --decrypt mysql-backup.tar.gpg | tar -C /var/vcap/store/mysql -xvf -</pre>
    1. Change the owner of the data directory, because MySQL expects the data directory to be owned by a particular user:
      <pre class="terminal">$ chown -R vcap:vcap /var/vcap/store/mysql</pre>
    1. Start all services with `monit`:
      <pre class="terminal">$ monit start all</pre>
    1. Watch the summary until all jobs are listed as `running`:
      <pre class="terminal">$ watch monit summary</pre>
    1. Exit out of the MySQL node.
1. Perform the following steps to increase the size of the cluster back to three:
    1. From the Ops Manager Installation Dashboard, click the **MySQL for PCF** tile.
    1. Click **Resource Config**.
    1. Set the number of instances for **MySQL Server** to `3`.
    1. Click **Save**.
    1. Return to the Ops Manager Installation Dashboard and click **Apply Changes**.

## <a id="manual-process"></a>Perform Manual Backup

If you do not want to use the automated backups included in MySQL for PCF, you can perform backups manually.

### <a id="manual-ip-creds"></a>Retrieve IP Address and Credentials

Perform the following steps to retrieve the IP address and credentials required for a manual backup:

1. From the Ops Manager Installation Dashboard, click the **MySQL for PCF** tile.
1. Click the **Status** tab.
1. Locate the IP address for the MySQL node under **MySQL Server**.
    ![MySQL Server IP](mysql-server-ip.png)
1. In the **Credentials** tab, from the **MySQL Server** job and **Mysql Admin Password** name, obtain the admin password.

### <a id="manual-backup"></a>Manual Backup

The procedure for backing up your data manually varies depending on whether you have enabled remote admin access to MySQL databases.

In MySQL for PCF v1.9 and v1.10, remote admin access is disabled by default. However, an operator can enable remote admin access when configuring the MySQL for PCF tile.

To determine whether remote admin access is enabled, perform the following steps:

1. From the Ops Manager Installation Dashboard, click the MySQL for PCF tile.
1. Click **MySQL Server Configuration**.
1. Locate the **Allow remote admin access** checkbox and determine whether or not it is enabled.

    For more information, see [MySQL Server Configuration](./configuring.html#server).

4. Use the following table to determine which procedure to follow for your manual backup:
 <table>
        <tr>
            <th>If remote admin access is&hellip; </th>
            <th>Then follow&hellip;</th>
        </tr>
        <tr>
            <td>disabled</td>
            <td><a href="#manual-backup-remote-access-disabled">Remote Admin Access Disabled (Default)</a></td>
        </tr>
        <tr>
            <td>enabled</td>
            <td><a href="#manual-backup-remote-access-enabled">Remote Admin Access Enabled</a></td>
        </tr>
    </table>

#### <a id='manual-backup-remote-access-disabled'></a>Manual Backup with Remote Admin Access Disabled (Default)

Perform the following steps to back up your MySQL for PCF data manually with remote admin access disabled:

1. Use the Cloud Foundry Command Line Interface (cf CLI) to target the Cloud Controller of your PCF deployment with `cf api api.YOUR-SYSTEM-DOMAIN`. For example:
  <pre class="terminal">$ cf api api.sys.cf-example.com</pre>
  For more information about installing and using the cf CLI, see the [cf CLI documentation](https://docs.pivotal.io/pivotalcf/cf-cli/index.html).
1. Log in:
  <pre class="terminal">$ cf login</pre>
1. Create a service key for the MySQL service instance. Run the following command:
    `cf create-service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME`
    <br><br>
    Where:<br>
    * `SERVICE-INSTANCE-NAME`: Enter the name of the existing MySQL service instance that contains the data you want to back up.  
    * `SERVICE-KEY-NAME`: Choose a name for the new service key.

    For example:
    <pre class="terminal">
    $ cf create-service-key mysql-spring spring-key 
    Creating service key spring-key for service instance mysql-spring as admin...
    OK
    </pre>
1. After creating the service key, retrieve its information. Run the following command:
  `cf service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME`
    <br><br>
    Where:<br>
    * `SERVICE-INSTANCE-NAME`: Enter the name of the MySQL service instance you created a service key for.
    * `SERVICE-KEY-NAME`: Enter the name of the newly created service key.

    For example:
    <pre class="terminal">
    $ cf service-key mysql-spring spring-key
    Getting key spring-key for service instance mysql-spring as admin...

    {
     "hostname": "10.10.10.5",
     "jdbcUrl": "jdbc:mysql://10.10.10.5:3306/cf\_e2d148a8\_1baa\_4961\_b314_2431f57037e5?user=abcdefghijklm\u0026password=123456789",
     "name": "cf\_e2d148a8\_1baa\_4961\_b314\_2431f57037e5",
     "password": "123456789",
     "port": 3306,
     "uri": "mysql://abcdefghijklm:123456789<span>@</span>10.10.10.5:3306/cf\_e2d148a8\_1baa\_4961\_b314\_2431f57037e5?reconnect=true",
     "username": "abcdefghijklm"
    }
    </pre>
1. Examine the output and record the following values:
    * `hostname`: The MySQL for PCF proxy IP address
    * `password`: The password for the user that can be used to perform backups of the service instance database
    * `username`: The username for the user that can be used to perform backups of the service instance database
1. Use [mysqldump](https://mariadb.com/kb/en/mariadb/mysqldump/) to back up the data for your service instance. Run the following command:
    `mysqldump -u USERNAME -p PASSWORD -h MYSQL-PROXY-IP --all-databases --single-transaction > BACKUP-NAME.sql`
    <br><br>
    Where:<br>
    * `USERNAME`: Enter the username retrieved from the output of `cf service-key`.
    * `PASSWORD`: Enter the password retrieved from the output of `cf service-key`.
    * `MYSQL-PROXY-IP`: Enter the value of `hostname` retrieved from the output of `cf service-key`.
    * `BACKUP-NAME`: Enter a name for the backup file.

    For example:
    <pre class="terminal">
    $ mysqldump -u abcdefghijklm \
    -p 123456789 \
    -h 10.10.10.8 \
    --all-databases \
    --single-transaction > spring-db-backup.sql</pre>

#### <a id='manual-backup-remote-access-enabled'></a>Manual Backup with Remote Admin Access Enabled

If remote admin access is enabled, use [mysqldump](https://mariadb.com/kb/en/mariadb/mysqldump/) to back up the data as the admin user.

<p class="note"><strong>Note</strong>: This backup acquires a global read lock on all tables, but does not hold it for the entire duration of the dump.</p>

To back up all databases in the MySQL deployment, run the following command:
```
mysqldump -u admin -p PASSWORD -h MYSQL-NODE-IP --all-databases --single-transaction > BACKUP-NAME.sql
```

Where:

* `PASSWORD`: Enter the admin password you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
* `MYSQL-NODE-IP`: Enter the MySQL node IP address you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
* `BACKUP-NAME`: Enter a name for the backup file.

For example:
<pre class="terminal">$ mysqldump -u admin -p 123456789 \
  -h 10.10.10.8 --all-databases \
  --single-transaction > user_databases.sql</pre>

To back up a single database, run the following command:
```
mysqldump -u admin -p PASSWORD -h MYSQL-NODE-IP DB-NAME --single-transaction > BACKUP-NAME.sql
```

Where:

* `PASSWORD`: Enter the admin password you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
* `MYSQL-NODE-IP`: Enter the MySQL node IP address you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
* `DB-NAME`: Enter the name of the database you want to back up.
* `BACKUP-NAME`: Enter a name for the backup file.

For example:
<pre class="terminal">
$ mysqldump -u admin -p 123456789 \
-h MYSQL-NODE-IP DB-NAME \
--single-transaction > user_databases.sql
</pre>

### <a id="manual-restore"></a>Manual Restore

The procedure for restoring your data from a manual backup varies depending on whether you have enabled remote admin access to MySQL databases.

In MySQL for PCF v1.9 and v1.10, remote admin access is disabled by default. However, an operator can enable remote admin access when configuring the MySQL for PCF tile.

To determine whether remote admin access is enabled, perform the following steps:

1. From the Ops Manager Installation Dashboard, click the MySQL for PCF tile.
1. Click **MySQL Server Configuration**.
1. Locate the **Allow remote admin access** checkbox and determine whether or not it is enabled.

For more information, see [MySQL Server Configuration](./configuring.html#server).

If remote admin access is disabled, perform the procedures in the [Remote Admin Access Disabled (Default)](#manual-backup-remote-access-disabled-restore) section. If you have enabled remote admin access, perform the procedures in the [Remote Admin Access Enabled](#manual-backup-remote-access-enabled-restore) section.

The procedure for restoring your MySQL data from a manual backup is the same for restoring a backup of one or multiple databases.
Executing the SQL dump will drop, recreate, and refill the specified databases and tables.

  <p class="note warning"><strong>WARNING</strong>: Restoring a database deletes all data that existed in the database before the restore. Restoring a database using a full backup artifact, produced by <code>mysqldump --all-databases</code> for example, replaces all data and user permissions.</p>

#### <a id='manual-restore-remote-access-disabled'></a>Manual Restore with Remote Admin Access Disabled (Default)

Perform the following steps to restore your MySQL data from a manual backup with remote admin access disabled:

1. If running in HA configuration, reduce the size of the MySQL for PCF cluster to a single node, following the procedures in the [Restore a Backup Artifact](#restoring) section above.
1. Perform steps 1 through 5 of the [Manual Backup with Remote Admin Access Disabled (Default)](#manual-backup-remote-access-disabled) section above.
1. Use the MySQL client to enable the creation of tables using any storage engine. Run the following command:
    `mysql -u USERNAME -p PASSWORD -h MYSQL-PROXY-IP -e "SET GLOBAL enforce_storage_engine=NULL"`
    <br><br>
    Where:
    * `USERNAME`: Enter the username retrieved from the output of `cf service-key`.
    * `PASSWORD`: Enter the password retrieved from the output of `cf service-key`.
    * `MYSQL-PROXY-IP`. Enter the value of `hostname` retrieved from the output of `cf service-key`.

    For example:
    <pre class="terminal">
    $ mysql -u abcdefghijklm \
    -p 123456789 \ 
    -h 10.10.10.8 -e "SET GLOBAL enforce\_storage\_engine=NULL"</pre>

1. Use the MySQL client to restore the MySQL database or databases. Run the following command:

    `mysql -u USERNAME -p PASSWORD -h MYSQL-PROXY-IP < BACKUP-NAME.sql`
    <br><br>
    Where:
    * `USERNAME`: Enter the username retrieved from the output of `cf service-key`.
    * `PASSWORD`: Enter the password retrieved from the output of `cf service-key`.
    * `MYSQL-PROXY-IP`. Enter the value of `hostname` retrieved from the output of `cf service-key`.
    * `BACKUP-NAME`: Enter the file name of the backup artifact.

    For example:
    <pre class="terminal">
    $ mysql -u abcdefghijklm \
    -p 123456789 \ 
    -h 10.10.10.8 -e < user_databases.sql</pre>

1. Use the MySQL client to restore the original storage engine restriction. Run the following command:

    `mysql -u USERNAME -p PASSWORD -h MYSQL-PROXY-IP -e "SET GLOBAL enforce_storage_engine='InnoDB'"`
    <br><br>
    Where:
    * `USERNAME`: Enter the username retrieved from the output of `cf service-key`.
    * `PASSWORD`: Enter the password retrieved from the output of `cf service-key`.
    * `MYSQL-PROXY-IP`. Enter the value of `hostname` retrieved from the output of `cf service-key`.

    For example:
    <pre class="terminal">
    $ mysql -u abcdefghijklm \
    -p 123456789 \ 
    -h 10.10.10.8 -e "SET GLOBAL enforce\_storage\_engine='InnoDB'"</pre>

1. If you are running in HA mode, re-configure MySQL for PCF to run using three nodes by following the procedures in the [Restore a Backup Artifact](#restoring) section above.
  <br><br>If you are not running HA mode, restart the database server. This step is not necessary if scaling back to three MySQL nodes. Run the following commands:
  <pre class="terminal">
  $ monit stop mariadb\_ctrl
  $ monit start mariadb\_ctrl
  </pre>

For more examples of manual backup and restore procedures, see the [MariaDB documentation](http://mariadb.com/kb/en/mariadb/mysqldump/#examples).

#### <a id='manual-restore-remote-access-enabled'></a>Manual Restore with Remote Admin Access Enabled

Perform the following steps to restore your MySQL data from a manual backup with remote admin access enabled:

1. If running in HA configuration, reduce the size of the MySQL for PCF cluster to a single node, following the procedures in the [Restore a Backup Artifact](#restoring) section above.
1. Use the MySQL client to enable the creation of tables using any storage engine. Run the following command:
    `mysql -u admin -p PASSWORD -h MYSQL-NODE-IP -e "SET GLOBAL enforce_storage_engine=NULL"`
    <br><br>
    Where:
    * `PASSWORD`: Enter the admin password you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
    * `MYSQL-NODE-IP`: Enter the MySQL node IP address you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.

    For example:
    <pre class="terminal">
    $ mysql -u abcdefghijklm \
    -p 123456789 \ 
    -h 10.10.10.8 -e "SET GLOBAL enforce\_storage\_engine=NULL"</pre>

1. Use the MySQL client to restore the MySQL database or databases. Run the following command:

    `mysql -u admin -p PASSWORD -h MYSQL-NODE-IP < BACKUP-NAME.sql`
    <br><br>
    Where:
    * `PASSWORD`: Enter the admin password you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
    * `MYSQL-NODE-IP`: Enter the MySQL node IP address you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
    * `BACKUP-NAME`: Enter the file name of the backup artifact.

    For example:
    <pre class="terminal">
    $ mysql -u admin \
    -p 123456789 \ 
    -h 10.10.10.8 -e < user_databases.sql</pre>

1. Use the MySQL client to restore the original storage engine restriction. Run the following command:

    `mysql -u admin -p PASSWORD -h MYSQL-NODE-IP -e "SET GLOBAL enforce_storage_engine='InnoDB'"`
    <br><br>
    Where:
    * `PASSWORD`: Enter the admin password you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.
    * `MYSQL-NODE-IP`: Enter the MySQL node IP address you retrieved in the [Retrieve IP Address and Credentials](#manual-ip-creds) section.

    For example:
    <pre class="terminal">
    $ mysql -u admin \
    -p 123456789 \ 
    -h 10.10.10.8 -e "SET GLOBAL enforce\_storage\_engine='InnoDB'"</pre>

1. If you are running in HA mode, re-configure MySQL for PCF to run using three nodes by following the procedures in the [Restore a Backup Artifact](#restoring) section above.
  <br><br>If you are not running HA mode, restart the database server. This step is not necessary if scaling back to three MySQL nodes. Run the following commands:
  <pre class="terminal">
  $ monit stop mariadb\_ctrl
  $ monit start mariadb\_ctrl
  </pre>

For more examples of manual backup and restore procedures, see the [MariaDB documentation](http://mariadb.com/kb/en/mariadb/mysqldump/#examples).
